import os
import sys

from PIL import Image


blank_icon = Image.open(
    os.path.join(os.path.dirname(__file__), "resources", "blank.png")
)


class SettingsMetaclass(type):
    """Meta class for Settings class so settings can be accessed as class attributes."""

    def __getattr__(self, attribute):
        """Returns value of provided attribute name."""
        return self.get_constants()[attribute][1]


class Settings(metaclass=SettingsMetaclass):
    """Class holding all the program's constants and Settings."""

    @staticmethod
    def get_constants():
        """Returns dictionary of all program constants in format name: (typ, value).

        ####
        DO NOT EDIT THIS FILE FOR USER SIDE CONFIGURATION - for such purpose
        use Settings.json file created/located in arrangeit user path directory.
        ####

        :returns: dict {str: (type(value), value)}
        """
        return {
            "LOCATE": (int, 0),
            "RESIZE": (int, 1),
            "OTHER": (int, 2),
            "BLANK_ICON": (Image.Image, blank_icon),
            "WINDOW_MODEL_TYPES": (
                dict,
                {
                    "wid": int,
                    "rect": (int, int, int, int),
                    "resizable": bool,
                    "title": str,
                    "name": str,
                    "icon": Image.Image,
                    "workspace": int,
                },
            ),
            "WINDOW_MODEL_RECT_ELEMENTS": (tuple, ("x", "y", "w", "h")),
            "WINDOW_MIN_WIDTH": (int, 100),
            "WINDOW_MIN_HEIGHT": (int, 40),
            "WINDOW_SHIFT_PIXELS": (int, 2),
            "ROOT_ALPHA": (float, 0.99),
            "DEFAULT_CURSOR": (str, "arrow"),
            "SELECT_CURSOR": (str, "hand2"),
            "SELECTED_COLOR": (str, "blue"),
            "HIGHLIGHTED_COLOR": (str, "red"),
            "TITLE_LABEL_RELHEIGHT": (float, 0.25),
            "TITLE_LABEL_RELWIDTH": (float, 0.75),
            "TITLE_LABEL_ANCHOR": (str, "w"),
            "TITLE_LABEL_BG": (str, "yellow"),
            "TITLE_LABEL_FG": (str, "black"),
            "TITLE_LABEL_FONT_INCREASE": (float, 0.1),
            "TITLE_LABEL_HEIGHT": (int, 3),
            "TITLE_LABEL_PADX": (int, 12),
            "TITLE_LABEL_PADY": (int, 6),
            "ICON_WIDTH": (int, 32),
            "ICON_LABEL_ANCHOR": (str, "n"),
            "ICON_LABEL_BG": (str, "white"),
            "ICON_LABEL_PADX": (int, 2),
            "ICON_LABEL_PADY": (int, 2),
            "NAME_LABEL_RELHEIGHT": (float, 0.25),
            "NAME_LABEL_RELWIDTH": (float, 0.25),
            "NAME_LABEL_ANCHOR": (str, "s"),
            "NAME_LABEL_BG": (str, "white"),
            "NAME_LABEL_FG": (str, "black"),
            "NAME_LABEL_HEIGHT": (int, 3),
            "NAME_LABEL_PADX": (int, 2),
            "NAME_LABEL_PADY": (int, 10),
            "WORKSPACES_FRAME_RELHEIGHT": (float, 0.60),
            "WORKSPACES_FRAME_RELWIDTH": (float, 0.25),
            "WORKSPACE_NUMBER_RELHEIGHT": (float, 0.75),
            "WORKSPACE_NUMBER_RELWIDTH": (float, 1.0),
            "WORKSPACE_NUMBER_LABEL_ANCHOR": (str, "center"),
            "WORKSPACE_NUMBER_LABEL_BG": (str, "white"),
            "WORKSPACE_NUMBER_LABEL_FG": (str, "black"),
            "WORKSPACE_NUMBER_FONT_INCREASE": (float, 0.8),
            "WORKSPACE_NUMBER_LABEL_PADX": (int, 2),
            "WORKSPACE_NUMBER_LABEL_PADY": (int, 2),
            "WORKSPACE_NAME_RELHEIGHT": (float, 0.25),
            "WORKSPACE_NAME_RELWIDTH": (float, 1.0),
            "WORKSPACE_NAME_LABEL_ANCHOR": (str, "center"),
            "WORKSPACE_NAME_LABEL_HEIGHT": (int, 2),
            "WORKSPACE_NAME_LABEL_BG": (str, "white"),
            "WORKSPACE_NAME_LABEL_FG": (str, "black"),
            "WORKSPACE_NAME_FONT_INCREASE": (float, -0.4),
            "WORKSPACE_NAME_LABEL_PADX": (int, 0),
            "WORKSPACE_NAME_LABEL_PADY": (int, 0),
            "WINDOWS_LIST_RELHEIGHT": (float, 0.75),
            "WINDOWS_LIST_RELWIDTH": (float, 0.75),
            "LISTED_WINDOW_RELHEIGHT": (float, 0.125),
            "LISTED_WINDOW_RELWIDTH": (float, 0.95),
            "LISTED_WINDOW_LABEL_ANCHOR": (str, "w"),
            "LISTED_WINDOW_LABEL_BG": (str, "white"),
            "LISTED_WINDOW_LABEL_FG": (str, "black"),
            "LISTED_WINDOW_NAME_FONT_INCREASE": (float, -0.1),
            "LISTED_WINDOW_LABEL_PADX": (int, 2),
            "LISTED_WINDOW_LABEL_PADY": (int, 2),
            "LISTED_ICON_LABEL_ANCHOR": (str, "w"),
            "LISTED_ICON_LABEL_BG": (str, "white"),
            "LISTED_ICON_LABEL_PADX": (int, 4),
            "LISTED_ICON_LABEL_PADY": (int, 0),
            "TOOLBAR_RELHEIGHT": (float, 0.15),
            "TOOLBAR_RELWIDTH": (float, 0.25),
            "TOOLBAR_BUTTON_FONT_INCREASE": (float, -0.1),
            "TOOLBAR_BUTTON_SHRINK_HEIGHT": (float, 0.2),
            "TOOLBAR_BUTTON_SHRINK_WIDTH": (float, 0.02),
            "OPTIONS_BUTTON_RELHEIGHT": (float, 1.0),
            "OPTIONS_BUTTON_RELWIDTH": (float, 0.5),
            "OPTIONS_BUTTON_ANCHOR": (str, "nw"),
            "QUIT_BUTTON_RELHEIGHT": (float, 1.0),
            "QUIT_BUTTON_RELWIDTH": (float, 0.5),
            "QUIT_BUTTON_ANCHOR": (str, "nw"),
        }


    # @staticmethod
    # def _setup_settings(cls):
    #     """Initializes all constants as settings module attributes."""

    #     for name, (_, value) in get_constants().items():
    #         setattr(sys.modules[__name__], name, value)
